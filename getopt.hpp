/*
 * POSIX like command-option parsing.
 *
 * Copyright snsinfu 2018.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef INCLUDED_GETOPT_HPP
#define INCLUDED_GETOPT_HPP

namespace cxx
{
    /**
     * A function-object implementation of POSIX getopt.
     * http://pubs.opengroup.org/onlinepubs/9699919799/functions/getopt.html
     */
    struct getopt
    {
        /** Index of the next argument to be processed. */
        int optind;

        /** Currently processed option character. */
        char optopt;

        /** Argument of currently processed option. */
        char* optarg;

        getopt()
            : optind(1), optopt(), optarg(), curopt_()
        {
        }

        /**
         * Behaves like POSIX getopt, using member variables instead of globals.
         *
         * Returns a recognized option character or -1 if all options have been
         * processed. A character '?' is returned on error: when unrecognized
         * option is found in argv or an expected option argument is missing.
         * In the latter case ':' is returned if optstring starts with a ':'.
         */
        int operator()(int argc, char* const* argv, char const* optstring)
        {
            // Implicit end of option
            if (optind >= argc
                || !argv[optind]
                || argv[optind][0] != '-'
                || argv[optind][1] == '\0') {
                return -1;
            }

            // Explicit end of option "--"
            if (argv[optind][1] == '-' && argv[optind][2] == '\0') {
                ++optind;
                return -1;
            }

            // Get next option character
            if (!curopt_ || *curopt_ == '\0') {
                curopt_ = argv[optind] + 1;
            }
            optopt = *curopt_++;

            // Find option specification in optstring
            char const* spec = optstring;
            while (*spec && *spec != optopt) {
                ++spec;
            }

            if (*spec == '\0') { // Error: Unrecognized option
                if (*curopt_ == '\0') {
                    ++optind;
                }
                return '?';
            }

            if (spec[1] == ':') { // The option expects an argument
                // Handle two possibilities: -oARG or -o ARG
                optarg = (*curopt_ ? curopt_ : argv[++optind]);
                curopt_ = 0;

                if (!optarg) { // Error: Missing argument
                    return (*optstring == ':') ? ':' : '?';
                }
                ++optind;
            } else {
                if (*curopt_ == '\0') {
                    ++optind;
                }
            }

            return optopt;
        }

      private:
        // Points to the option character in argv that will be processed in the
        // next getopt call.
        char* curopt_;
    };
}

#endif
